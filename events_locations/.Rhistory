for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
#print(RNA_read)
print(cbind(bin_name, RNA_read))
TOBG_map_list <- rbind(unname(TOBG_map_list), cbind(bin_name, RNA_read))
}
}
}
TOBG_map_list <- list()
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
#print(RNA_read)
append <- data.frame(x = bin_name, y = RNA_read)
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
View(TOBG_map_list)
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
append <- data.frame(bin_name = TOBG_bam_map[r, 1],
RNA_read = colnames(TOBG_bam_map)[c],
cov_value = TOBG_bam_map[r, c])
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
append <- data.frame(x = TOBG_bam_map[r, 1],
y = colnames(TOBG_bam_map)[c],
z = TOBG_bam_map[r, c])
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
View(TOBG_map_list)
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
append <- data.frame(bin_name = TOBG_bam_map[r, 1],
RNA_read = colnames(TOBG_bam_map)[c],
cov_value = TOBG_bam_map[r, c])
TOBG_map_list <- rbind(TOBG_map_list, unname(append))
}
}
}
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
#print(RNA_read)
append <- data.frame(bin_name = bin_name, y = RNA_read)
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
#print(RNA_read)
append <- data.frame(bin_name = bin_name, RNA_read_file = RNA_read)
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
cov_value <- TOBG_bam_map[r, c]
#print(RNA_read)
append <- data.frame(bin_name = bin_name,
RNA_read_file = RNA_read,
coverage_value = cov_value)
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
cov_value <- TOBG_bam_map[r, c]
print(cov_value)
append <- data.frame(bin_name = bin_name,
RNA_read_file = RNA_read,
coverage_value = cov_value)
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
cov_value <- TOBG_bam_map[r, c]
print(unname(cov_value))
append <- data.frame(bin_name = bin_name,
RNA_read_file = RNA_read,
coverage_value = cov_value)
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
cov_value <- TOBG_bam_map[r, c]
print(unname(cov_value))
append <- unname(data.frame(bin_name = bin_name,
RNA_read_file = RNA_read,
coverage_value = cov_value))
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
cov_value <- TOBG_bam_map[r, c]
append <- unname(data.frame(bin_name = bin_name,
RNA_read_file = RNA_read,
coverage_value = cov_value))
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
View(TOBG_map_list)
TOBG_map_list <- data.frame()
colnames(TOBG_map_list)<-c("bin_name","RNA_read_file","coverage")
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
cov_value <- TOBG_bam_map[r, c]
append <- data.frame(bin_name,RNA_read, cov_value)
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
TOBG_map_list <- data.frame()
colnames(TOBG_map_list)<-c("bin_name","RNA_read_file","coverage")
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
cov_value <- TOBG_bam_map[r, c]
append <- data.frame(bin_name,RNA_read, cov_value)
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
TOBG_bam_map <- TOBG_subset_clean[, c(1, 3:43)]
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
append <- data.frame(bin_name,RNA_read)
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
TOBG_bam_map[1,1]
TOBG_bam_map[1,2]
c(TOBG_bam_map[1,2])
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
append <- data.frame(bin_name,RNA_read, c(TOBG_bam_map[r,c]))
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
pull(TOBG_bam_map[1,2])
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
append <- data.frame(bin_name,RNA_read, pull(TOBG_bam_map[r,c]))
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
colnames(TOBG_map_list)<-c("bin_name","RNA_read_file","coverage")
colnames(TOBG_map_list)<-c("bin_name","RNA_read_file","DNA_coverage")
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 0.1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
append <- data.frame(bin_name,RNA_read, pull(TOBG_bam_map[r,c]))
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
colnames(TOBG_map_list)<-c("bin_name","RNA_read_file","DNA_coverage")
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 0.5){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
append <- data.frame(bin_name,RNA_read, pull(TOBG_bam_map[r,c]))
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
colnames(TOBG_map_list)<-c("bin_name","RNA_read_file","DNA_coverage")
View(TOBG_subset_clean)
print(i)
for (i in 0:10){
print(i)
}
count = 0
for (i in 0:10){
count += 1
}
print(count)
count = 0
for (i in 0:10){
count <- count + 1
}
print(count)
sessioninfo()
R.Version()
# Auto-generate ARIMA coefficients
# auto.arima(resid_lm)
X <- model.matrix(~ (.-date-electricity_kwh)*covid-covid:avg_temperature, data = electricity)
# Load relevant packages
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(forecast)
options(warn = -1)
# Load dataset
electricity <- read_csv("combined_dataset.csv")
View(prob_matrix)
knitr::opts_chunk$set(echo = TRUE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path ))
library(reshape2)
library(stringr)
location_prob = t(read.csv("node-location-probability.csv", header=FALSE))
node_species = read.delim("node-species-mapping.txt", header = FALSE)
location_prob = as.data.frame(head(location_prob , -2)) # last 2 rows are summary statistics
colnames(location_prob) = c("node_state", "probability")
location_prob$node_state = str_replace(location_prob$node_state, "Node", "")
location_prob$node_state = str_replace(location_prob$node_state, "Root", "-1")
location_prob = separate(location_prob, node_state, into = c("node", "location"), sep = "\\.P\\.")
location_prob = location_prob %>% mutate(
node = as.numeric(node),
loc = ifelse(location == "A.", "host_associated",
ifelse(location == "B.", "marine_deep",
ifelse(location == "C.", "marine_shallow",
ifelse(location == "D.", "terrestrial", "ungrouped")))))
# note: -1 is the root
prob_matrix = dcast(location_prob, node ~ loc, value.var = "probability")
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path ))
library(reshape2)
library(stringr)
library(dplyr)
location_prob = t(read.csv("node-location-probability.csv", header=FALSE))
node_species = read.delim("node-species-mapping.txt", header = FALSE)
location_prob = as.data.frame(head(location_prob , -2)) # last 2 rows are summary statistics
colnames(location_prob) = c("node_state", "probability")
location_prob$node_state = str_replace(location_prob$node_state, "Node", "")
location_prob$node_state = str_replace(location_prob$node_state, "Root", "-1")
location_prob = separate(location_prob, node_state, into = c("node", "location"), sep = "\\.P\\.")
location_prob = location_prob %>% mutate(
node = as.numeric(node),
loc = ifelse(location == "A.", "host_associated",
ifelse(location == "B.", "marine_deep",
ifelse(location == "C.", "marine_shallow",
ifelse(location == "D.", "terrestrial", "ungrouped")))))
# note: -1 is the root
prob_matrix = dcast(location_prob, node ~ loc, value.var = "probability")
knitr::opts_chunk$set(echo = TRUE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path ))
library(reshape2)
library(stringr)
library(tidyverse)
location_prob = t(read.csv("node-location-probability.csv", header=FALSE))
node_species = read.delim("node-species-mapping.txt", header = FALSE)
location_prob = as.data.frame(head(location_prob , -2)) # last 2 rows are summary statistics
colnames(location_prob) = c("node_state", "probability")
location_prob$node_state = str_replace(location_prob$node_state, "Node", "")
location_prob$node_state = str_replace(location_prob$node_state, "Root", "-1")
location_prob = separate(location_prob, node_state, into = c("node", "location"), sep = "\\.P\\.")
location_prob = location_prob %>% mutate(
node = as.numeric(node),
loc = ifelse(location == "A.", "host_associated",
ifelse(location == "B.", "marine_deep",
ifelse(location == "C.", "marine_shallow",
ifelse(location == "D.", "terrestrial", "ungrouped")))))
# note: -1 is the root
prob_matrix = dcast(location_prob, node ~ loc, value.var = "probability")
Vire(prob_matrix)
View(prob_matrix)
bayesTraits_species_tree_mapping <- read.delim("C:/Users/Admin Juntao/Desktop/tree-reconciliation/events_locations/bayesTraits_species_tree_mapping.txt", header=FALSE)
View(bayesTraits_species_tree_mapping)
read.delim("bayesTraits_species_tree_mapping.txt", header=FALSE)
bayesTraits_tree = read.delim("bayesTraits_species_tree_mapping.txt", header=FALSE)
location_prob = t(read.csv("node-location-probability.csv", header=FALSE))
node_species = read.delim("node-species-mapping.txt", header = FALSE)
location_prob = as.data.frame(head(location_prob , -2)) # last 2 rows are summary statistics
colnames(location_prob) = c("node_state", "probability")
location_prob$node_state = str_replace(location_prob$node_state, "Node", "")
# don't infer anything about the root
location_prob = filter(location_prob, node_state != "Root")
location_prob = separate(location_prob, node_state, into = c("node", "location"), sep = "\\.P\\.")
location_prob = location_prob %>% mutate(
node = as.numeric(node),
loc = ifelse(location == "A.", "host_associated",
ifelse(location == "B.", "marine_deep",
ifelse(location == "C.", "marine_shallow",
ifelse(location == "D.", "terrestrial", "ungrouped")))))
# note: -1 is the root
prob_matrix = dcast(location_prob, node ~ loc, value.var = "probability")
View(location_prob)
location_prob = as.data.frame(head(location_prob , -2)) # last 2 rows are summary statistics
location_prob = t(read.csv("node-location-probability.csv", header=FALSE))
node_species = read.delim("node-species-mapping.txt", header = FALSE)
location_prob = as.data.frame(head(location_prob , -2)) # last 2 rows are summary statistics
colnames(location_prob) = c("node_state", "probability")
location_prob = t(read.csv("node-location-probability.csv", header=FALSE))
node_species = read.delim("node-species-mapping.txt", header = FALSE)
location_prob = as.data.frame(head(location_prob , -2)) # last 2 rows are summary statistics
colnames(location_prob) = c("node_state", "probability")
location_prob$node_state = str_replace(location_prob$node_state, "Node", "")
location_prob2 = separate(location_prob, node_state, into = c("node", "location"), sep = "\\.P\\.") %>%
filter(node != "Root") # don't infer anything about the root
location_prob2 = location_prob2 %>% mutate(
node = as.numeric(node),
loc = ifelse(location == "A.", "host_associated",
ifelse(location == "B.", "marine_deep",
ifelse(location == "C.", "marine_shallow",
ifelse(location == "D.", "terrestrial", "ungrouped")))))
# note: -1 is the root
prob_matrix = dcast(location_prob, node ~ loc, value.var = "probability")
# note: -1 is the root
prob_matrix = dcast(location_prob2, node ~ loc, value.var = "probability")
bayesTraits_tree = read.delim("bayesTraits_species_tree_mapping.txt", header=FALSE)
View(bayesTraits_tree)
colnames(bayesTraits_tree) = c("node", "count", "leaves")
bayesTraits_tree = bayesTraits_tree %>%
mutate(node = str_replace(node, "Node", ""))
prob_matrix_leaves = merge(prob_matrix, bayesTraits_tree, by = "node")
View(prob_matrix_leaves)
event_date_file = "../ecceTERA_analysis/COG0003_symmetric.events_event_dates.txt"
COG = str_match(event_date_file, "COG\\d+")[1]
COG
all = read.delim(event_date_file, na.strings = "?")
View(all)
all %>% filter(right.node != "UNSAMPLED") %>%
select(event, midpoint.date) %>%
mutate(COG = COG)
event_date = all %>% filter(right.node != "UNSAMPLED") %>%
select(event, midpoint.date) %>%
mutate(COG = COG)
View(event_date)
event_date = all %>%
filter(right.node != "UNSAMPLED") %>%
# select(event, midpoint.date) %>%
mutate(COG = COG)
View(prob_matrix)
speciation = filter(event_date, event = "spe")
View(speciation)
speciation = filter(event_date, event == "spe")
View(speciation)
leaves_of_ecceTERA_interal_nodes <- read.csv("C:/Users/Admin Juntao/Desktop/tree-reconciliation/events_locations/leaves_of_ecceTERA_interal_nodes.csv")
View(leaves_of_ecceTERA_interal_nodes)
ecceTERA_node_coding = read.csv("leaves_of_ecceTERA_interal_nodes.csv")
ecceTERA_node_coding = read.csv("leaves_of_ecceTERA_interal_nodes.csv")
View(ecceTERA_node_coding)
View(prob_matrix_leaves)
ecceTERA_node_coding = read.csv("leaves_of_ecceTERA_interal_nodes.csv")
bayesTraits_tree = read.delim("bayesTraits_species_tree_mapping.txt", header=FALSE)
colnames(bayesTraits_tree) = c("Node", "count", "leaves_below")
bayesTraits_tree = bayesTraits_tree %>%
mutate(node = str_replace(Node, "Node", ""))
prob_matrix_leaves = merge(prob_matrix, bayesTraits_tree, by = "Node")
View(prob_matrix_leaves)
colnames(bayesTraits_tree) = c("Node", "count", "leaves_below")
bayesTraits_tree = bayesTraits_tree %>%
mutate(node = str_replace(Node, "Node", ""))
prob_matrix_leaves = merge(prob_matrix, bayesTraits_tree, by = "Node")
colnames(bayesTraits_tree) = c("Node", "count", "leaves_below")
bayesTraits_tree = bayesTraits_tree %>%
mutate(Node = str_replace(Node, "Node", ""))
View(bayesTraits_tree)
bayesTraits_tree = read.delim("bayesTraits_species_tree_mapping.txt", header=FALSE)
bayesTraits_tree = read.delim("bayesTraits_species_tree_mapping.txt", header=FALSE,
col.names = c("Node", "count", "leaves_below"))
bayesTraits_tree = bayesTraits_tree %>%
mutate(Node = str_replace(Node, "Node", ""))
prob_matrix_leaves = merge(prob_matrix, bayesTraits_tree, by = "Node")
knitr::opts_chunk$set(echo = TRUE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path ))
library(reshape2)
library(stringr)
library(tidyverse)
location_prob = t(read.csv("node-location-probability.csv", header=FALSE))
node_species = read.delim("node-species-mapping.txt", header = FALSE)
ecceTERA_node_coding = read.csv("leaves_of_ecceTERA_interal_nodes.csv")
bayesTraits_tree = read.delim("bayesTraits_species_tree_mapping.txt", header=FALSE,
col.names = c("Node", "count", "leaves_below"))
location_prob = as.data.frame(head(location_prob , -2)) # last 2 rows are summary statistics
colnames(location_prob) = c("node_state", "probability")
location_prob$node_state = str_replace(location_prob$node_state, "Node", "")
location_prob2 = separate(location_prob, node_state, into = c("Node", "location"), sep = "\\.P\\.") %>%
filter(Node != "Root") # don't infer anything about the root
location_prob2 = location_prob2 %>% mutate(
Node = as.numeric(Node),
loc = ifelse(location == "A.", "host_associated",
ifelse(location == "B.", "marine_deep",
ifelse(location == "C.", "marine_shallow",
ifelse(location == "D.", "terrestrial", "ungrouped")))))
# note: -1 is the root
prob_matrix = dcast(location_prob2, Node ~ loc, value.var = "probability")
bayesTraits_tree = bayesTraits_tree %>%
mutate(Node = str_replace(Node, "Node", ""))
prob_matrix_leaves = merge(prob_matrix, bayesTraits_tree, by = "Node")
View(prob_matrix_leaves)
knitr::opts_chunk$set(echo = TRUE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path ))
library(reshape2)
library(stringr)
library(tidyverse)
location_prob = t(read.csv("node-location-probability.csv", header=FALSE))
node_species = read.delim("node-species-mapping.txt", header = FALSE)
ecceTERA_node_coding = read.csv("leaves_of_ecceTERA_interal_nodes.csv")
bayesTraits_tree = read.delim("bayesTraits_species_tree_mapping.txt", header=FALSE,
col.names = c("BT_node", "count", "leaves_below"))
location_prob = as.data.frame(head(location_prob , -2)) # last 2 rows are summary statistics
colnames(location_prob) = c("node_state", "probability")
location_prob$node_state = str_replace(location_prob$node_state, "Node", "")
location_prob2 = separate(location_prob, node_state, sep = "\\.P\\.",
into = c("BT_node", "location")) %>% # BT for Bayes Traits
filter(BT_node != "Root") # don't infer anything about the root
location_prob2 = location_prob2 %>% mutate(
BT_node = as.numeric(BT_node),
loc = ifelse(location == "A.", "host_associated",
ifelse(location == "B.", "marine_deep",
ifelse(location == "C.", "marine_shallow",
ifelse(location == "D.", "terrestrial", "ungrouped")))))
# note: -1 is the root
prob_matrix = dcast(location_prob2, BT_node ~ loc, value.var = "probability")
bayesTraits_tree = bayesTraits_tree %>%
mutate(BT_node = str_replace(BT_node, "Node", ""))
prob_matrix_leaves = merge(prob_matrix, bayesTraits_tree, by = "BT_node")
View(event_data)
View(event_date)
event_date_file = "../ecceTERA_analysis/COG0003_symmetric.events_event_dates.txt"
COG = str_match(event_date_file, "COG\\d+")[1]
event_date = read.delim(event_date_file, na.strings = "?") %>%
filter(right.node != "UNSAMPLED")
View(event_date)
speciation = filter(event_date, event == "spe") %>%
select(left.node, left.date)
speciation = filter(event_date, event == "spe") %>%
select(left.node, left.date) # speciation has only 1 value for all them
colnames(speciation) = c("ecceTERA_node", "date")
ecceTERA_node_coding = read.csv("leaves_of_ecceTERA_interal_nodes.csv")
speciation = merge(speciation, ecceTERA_node_coding, on = "ecceTERA_node")
View(speciation)
View(prob_matrix_leaves)
leaves = bayesTraits_tree$leaves_below
View(leaves)
leaves
tmp = "Chloroplast.Rhodophyta.Porphyridium.purpureum Chloroplast.Rhodophyta.Gracilariopsis.lemaneiformis Chloroplast.Rhodophyta.Cyanidioschyzon.merolae"
vec = strsplit(tmp,split = ' ')
vec
