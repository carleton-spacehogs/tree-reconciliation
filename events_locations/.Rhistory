loc_dfs = loc_dfs[loc_dfs[, paste0(plot_node, ".origin")] %in% mixed_states, ]
gen_loc_name = function(k) return(sprintf("%s-plots/location-%snode/%s_%s_%s.png", clock_model, plot_node, plot_node, k, type))
if (remove_leaf_events) {
gen_loc_name = function(k) return(sprintf("%s-plots/internal-location-%snode/internal_%s_%s_%s.png", clock_model, plot_node, plot_node, k, type))
}
# plotting the location where the events happened!!!!
make_graph(loc_iron, out_graph = gen_loc_name("iron"), title_text = "COGs high corr to iron", location = TRUE)
make_graph(loc_NO2NO3, gen_loc_name("nitrogen"), "COGs high corr to NO2NO3", location = TRUE)
make_graph(loc_PO4, gen_loc_name("phosphate"), "COGs high corr to phosphate", location = TRUE)
make_graph(loc_oxygen, gen_loc_name("oxygen"), "COGs high corr to oxygen", location = TRUE)
make_graph(loc_inorganic_ion, gen_loc_name("inorganic_ion"), "inorganic ion COGs", location = TRUE)
g2 = ggplot(loc_dfs, aes_string(x = paste0(plot_node, ".date"), color = paste0(plot_node, ".origin"), y = "substrate", group = "substrate")) + scale_color_manual(values = mixed_color_scale)
jitter_plot_shared(g2, ytop = length(unique(all_location_dfs$substrate)))
# if (remove_leaf_events) {
#   ggsave(sprintf("%s-plots/all-substrate/internal-location-%snode.png", clock_model, plot_node), width = 10, height = 5)
# } else {
#   ggsave(sprintf("%s-plots/all-substrate/location-%snode.png", clock_model, plot_node), width = 10, height = 5)
# }
# }
if (remove_leaf_events) {
ggsave(sprintf("T24/internal-location-%snode.png", clock_model, plot_node), width = 10, height = 5)
} else {
ggsave(sprintf("T24/location-%snode.png", clock_model, plot_node), width = 10, height = 5)
}
}
make_graph(loc_iron, out_graph = gen_loc_name("iron"), title_text = "COGs high corr to iron", location = TRUE)
loc_iron
merge_events = function(COGs, location = FALSE) {
file_list = paste0(sprintf("../%s_ecceTERA_analysis/", clock_model), COGs, "_symmetric.events_event_dates.txt")
if (location) {
file_list = paste0(sprintf("../events_locations/T24_%s_location_merged_events/", clock_model), COGs, "-events-location.tsv")
}
data_list = lapply(file_list, read_events, location = location)
merge_data = bind_rows(data_list)
return(merge_data)
}
loc_iron = get_events("sqrt_iron", "iron", location = TRUE)
loc_NO2NO3 = get_events("log_NO2NO3", "Nitrogen", location = TRUE)
loc_PO4 = get_events("log_PO4", "PO4", location = TRUE)
loc_oxygen = get_events("Mean_Oxygen", "Oxygen", location = TRUE)
loc_inorganic_ion = get_events("inorganic_ion", "inorganic_ion", location = TRUE)
loc_dfs = rbind(loc_iron, loc_NO2NO3, loc_PO4, loc_oxygen, loc_inorganic_ion, get_events("Fe2+_text_search", "Fe2_textSearch", location = TRUE), get_events("Fe3+_text_search", "Fe3_textSearch", location = TRUE))
loc_dfs = loc_dfs[loc_dfs[, paste0(plot_node, ".origin")] %in% mixed_states, ]
gen_loc_name = function(k) return(sprintf("T24/%s_%s_%s.png", clock_model, plot_node, plot_node, k, type))
make_graph(loc_iron, out_graph = gen_loc_name("iron"), title_text = "COGs high corr to iron", location = TRUE)
make_graph(loc_NO2NO3, gen_loc_name("nitrogen"), "COGs high corr to NO2NO3", location = TRUE)
make_graph(loc_PO4, gen_loc_name("phosphate"), "COGs high corr to phosphate", location = TRUE)
make_graph(loc_oxygen, gen_loc_name("oxygen"), "COGs high corr to oxygen", location = TRUE)
make_graph(loc_inorganic_ion, gen_loc_name("inorganic_ion"), "inorganic ion COGs", location = TRUE)
gen_loc_name = function(k) return(sprintf("T24/%s_%s_%s.png", plot_node, k, type))
make_graph(loc_iron, out_graph = gen_loc_name("iron"), title_text = "COGs high corr to iron", location = TRUE)
make_graph(loc_NO2NO3, gen_loc_name("nitrogen"), "COGs high corr to NO2NO3", location = TRUE)
make_graph(loc_PO4, gen_loc_name("phosphate"), "COGs high corr to phosphate", location = TRUE)
make_graph(loc_oxygen, gen_loc_name("oxygen"), "COGs high corr to oxygen", location = TRUE)
make_graph(loc_inorganic_ion, gen_loc_name("inorganic_ion"), "inorganic ion COGs", location = TRUE)
g2 = ggplot(loc_dfs, aes_string(x = paste0(plot_node, ".date"), color = paste0(plot_node, ".origin"), y = "substrate", group = "substrate")) + scale_color_manual(values = mixed_color_scale)
jitter_plot_shared(g2, ytop = length(unique(all_location_dfs$substrate)))
g2 = ggplot(loc_dfs, aes_string(x = paste0(plot_node, ".date"), color = paste0(plot_node, ".origin"), y = "substrate", group = "substrate")) + scale_color_manual(values = mixed_color_scale)
jitter_plot_shared(g2, ytop = length(unique(loc_dfs$substrate)))
# if (remove_leaf_events) {
#   ggsave(sprintf("%s-plots/all-substrate/internal-location-%snode.png", clock_model, plot_node), width = 10, height = 5)
# } else {
#   ggsave(sprintf("%s-plots/all-substrate/location-%snode.png", clock_model, plot_node), width = 10, height = 5)
# }
# }
if (remove_leaf_events) {
ggsave(sprintf("T24/internal-location-%snode.png", plot_node), width = 10, height = 5)
} else {
ggsave(sprintf("T24/location-%snode.png", plot_node), width = 10, height = 5)
}
clock_model = "cir1"
# remove_leaf_events = TRUE
plot_node = "left"
# type="density"
type="histogram"
categories_COGs = read.csv("high-cor-COGs.txt", row.names=1, comment.char="#")
COG_record = read.csv(sprintf("../COG_reconciliation_summary_%s.csv", clock_model))
done_COGs = pull(COG_record, COG)
good_COGs = filter(COG_record, exit_status == "everything_successful") %>% pull(COG)
# can only choose left or right origin
for (plot_node in c("left", "right")) {
loc_iron = get_events("sqrt_iron", "iron", location = TRUE)
loc_NO2NO3 = get_events("log_NO2NO3", "Nitrogen", location = TRUE)
loc_PO4 = get_events("log_PO4", "PO4", location = TRUE)
loc_oxygen = get_events("Mean_Oxygen", "Oxygen", location = TRUE)
loc_inorganic_ion = get_events("inorganic_ion", "inorganic_ion", location = TRUE)
loc_dfs = rbind(loc_iron, loc_NO2NO3, loc_PO4, loc_oxygen, loc_inorganic_ion, get_events("Fe2+_text_search", "Fe2_textSearch", location = TRUE), get_events("Fe3+_text_search", "Fe3_textSearch", location = TRUE))
loc_dfs = loc_dfs[loc_dfs[, paste0(plot_node, ".origin")] %in% mixed_states, ]
# gen_loc_name = function(k) return(sprintf("%s-plots/location-%snode/%s_%s_%s.png", clock_model, plot_node, plot_node, k, type))
gen_loc_name = function(k) return(sprintf("T24/%s_%s_%s.png", plot_node, k, type))
if (remove_leaf_events) {
gen_loc_name = function(k) return(sprintf("%s-plots/internal-location-%snode/internal_%s_%s_%s.png", clock_model, plot_node, plot_node, k, type))
}
# plotting the location where the events happened!!!!
make_graph(loc_iron, out_graph = gen_loc_name("iron"), title_text = "COGs high corr to iron", location = TRUE)
make_graph(loc_NO2NO3, gen_loc_name("nitrogen"), "COGs high corr to NO2NO3", location = TRUE)
make_graph(loc_PO4, gen_loc_name("phosphate"), "COGs high corr to phosphate", location = TRUE)
make_graph(loc_oxygen, gen_loc_name("oxygen"), "COGs high corr to oxygen", location = TRUE)
make_graph(loc_inorganic_ion, gen_loc_name("inorganic_ion"), "inorganic ion COGs", location = TRUE)
g2 = ggplot(loc_dfs, aes_string(x = paste0(plot_node, ".date"), color = paste0(plot_node, ".origin"), y = "substrate", group = "substrate")) + scale_color_manual(values = mixed_color_scale)
jitter_plot_shared(g2, ytop = length(unique(loc_dfs$substrate)))
# if (remove_leaf_events) {
#   ggsave(sprintf("%s-plots/all-substrate/internal-location-%snode.png", clock_model, plot_node), width = 10, height = 5)
# } else {
#   ggsave(sprintf("%s-plots/all-substrate/location-%snode.png", clock_model, plot_node), width = 10, height = 5)
# }
# }
if (remove_leaf_events) {
ggsave(sprintf("T24/internal-location-%snode.png", plot_node), width = 10, height = 5)
} else {
ggsave(sprintf("T24/location-%snode.png", plot_node), width = 10, height = 5)
}
}
plot_node="left"
loc_iron = get_events("sqrt_iron", "iron", location = TRUE)
loc_NO2NO3 = get_events("log_NO2NO3", "Nitrogen", location = TRUE)
loc_PO4 = get_events("log_PO4", "PO4", location = TRUE)
loc_oxygen = get_events("Mean_Oxygen", "Oxygen", location = TRUE)
loc_inorganic_ion = get_events("inorganic_ion", "inorganic_ion", location = TRUE)
loc_dfs = rbind(loc_iron, loc_NO2NO3, loc_PO4, loc_oxygen, loc_inorganic_ion, get_events("Fe2+_text_search", "Fe2_textSearch", location = TRUE), get_events("Fe3+_text_search", "Fe3_textSearch", location = TRUE))
loc_dfs = loc_dfs[loc_dfs[, paste0(plot_node, ".origin")] %in% mixed_states, ]
gen_loc_name = function(k) return(sprintf("T24/%s_%s_%s.png", plot_node, k, type))
if (remove_leaf_events) {
gen_loc_name = function(k) return(sprintf("%s-plots/internal-location-%snode/internal_%s_%s_%s.png", clock_model, plot_node, plot_node, k, type))
}
make_graph(loc_iron, out_graph = gen_loc_name("iron"), title_text = "COGs high corr to iron", location = TRUE)
make_graph(loc_NO2NO3, gen_loc_name("nitrogen"), "COGs high corr to NO2NO3", location = TRUE)
make_graph(loc_PO4, gen_loc_name("phosphate"), "COGs high corr to phosphate", location = TRUE)
make_graph(loc_oxygen, gen_loc_name("oxygen"), "COGs high corr to oxygen", location = TRUE)
make_graph(loc_inorganic_ion, gen_loc_name("inorganic_ion"), "inorganic ion COGs", location = TRUE)
g2 = ggplot(loc_dfs, aes_string(x = paste0(plot_node, ".date"), color = paste0(plot_node, ".origin"), y = "substrate", group = "substrate")) + scale_color_manual(values = mixed_color_scale)
jitter_plot_shared(g2, ytop = length(unique(loc_dfs$substrate)))
# if (remove_leaf_events) {
#   ggsave(sprintf("%s-plots/all-substrate/internal-location-%snode.png", clock_model, plot_node), width = 10, height = 5)
# } else {
#   ggsave(sprintf("%s-plots/all-substrate/location-%snode.png", clock_model, plot_node), width = 10, height = 5)
# }
# }
if (remove_leaf_events) {
ggsave(sprintf("T24/internal-location-%snode.png", plot_node), width = 10, height = 5)
} else {
ggsave(sprintf("T24/location-%snode.png", plot_node), width = 10, height = 5)
}
gen_loc_name
remove_leaf_events = FALSE
plot_node = "left"
clock_model = "cir1"
remove_leaf_events = FALSE
plot_node = "left"
# type="density"
type="histogram"
categories_COGs = read.csv("high-cor-COGs.txt", row.names=1, comment.char="#")
COG_record = read.csv(sprintf("../COG_reconciliation_summary_%s.csv", clock_model))
done_COGs = pull(COG_record, COG)
good_COGs = filter(COG_record, exit_status == "everything_successful") %>% pull(COG)
loc_iron = get_events("sqrt_iron", "iron", location = TRUE)
loc_NO2NO3 = get_events("log_NO2NO3", "Nitrogen", location = TRUE)
loc_PO4 = get_events("log_PO4", "PO4", location = TRUE)
loc_oxygen = get_events("Mean_Oxygen", "Oxygen", location = TRUE)
loc_inorganic_ion = get_events("inorganic_ion", "inorganic_ion", location = TRUE)
loc_dfs = rbind(loc_iron, loc_NO2NO3, loc_PO4, loc_oxygen, loc_inorganic_ion, get_events("Fe2+_text_search", "Fe2_textSearch", location = TRUE), get_events("Fe3+_text_search", "Fe3_textSearch", location = TRUE))
loc_dfs = loc_dfs[loc_dfs[, paste0(plot_node, ".origin")] %in% mixed_states, ]
gen_loc_name = function(k) return(sprintf("T24/%s_%s_%s.png", plot_node, k, type))
make_graph(loc_iron, out_graph = gen_loc_name("iron"), title_text = "COGs high corr to iron", location = TRUE)
make_graph(loc_NO2NO3, gen_loc_name("nitrogen"), "COGs high corr to NO2NO3", location = TRUE)
make_graph(loc_PO4, gen_loc_name("phosphate"), "COGs high corr to phosphate", location = TRUE)
make_graph(loc_oxygen, gen_loc_name("oxygen"), "COGs high corr to oxygen", location = TRUE)
make_graph(loc_inorganic_ion, gen_loc_name("inorganic_ion"), "inorganic ion COGs", location = TRUE)
g2 = ggplot(loc_dfs, aes_string(x = paste0(plot_node, ".date"), color = paste0(plot_node, ".origin"), y = "substrate", group = "substrate")) + scale_color_manual(values = mixed_color_scale)
jitter_plot_shared(g2, ytop = length(unique(loc_dfs$substrate)))
# if (remove_leaf_events) {
#   ggsave(sprintf("%s-plots/all-substrate/internal-location-%snode.png", clock_model, plot_node), width = 10, height = 5)
# } else {
#   ggsave(sprintf("%s-plots/all-substrate/location-%snode.png", clock_model, plot_node), width = 10, height = 5)
# }
# }
if (remove_leaf_events) {
ggsave(sprintf("T24/internal-location-%snode.png", plot_node), width = 10, height = 5)
} else {
ggsave(sprintf("T24/location-%snode.png", plot_node), width = 10, height = 5)
}
clock_model = "cir1"
remove_leaf_events = TRUE
plot_node = "left"
# type="density"
type="histogram"
categories_COGs = read.csv("high-cor-COGs.txt", row.names=1, comment.char="#")
COG_record = read.csv(sprintf("../COG_reconciliation_summary_%s.csv", clock_model))
done_COGs = pull(COG_record, COG)
good_COGs = filter(COG_record, exit_status == "everything_successful") %>% pull(COG)
library(ggplot2)
library(cowplot)
library(dplyr)
library(stringr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path ))
source("plot-substrate-utils.R")
clock_model = "cir1"
remove_leaf_events = TRUE
plot_node = "left"
# type="density"
type="histogram"
categories_COGs = read.csv("high-cor-COGs.txt", row.names=1, comment.char="#")
COG_record = read.csv(sprintf("../COG_reconciliation_summary_%s.csv", clock_model))
done_COGs = pull(COG_record, COG)
good_COGs = filter(COG_record, exit_status == "everything_successful") %>% pull(COG)
loc_iron = get_events("sqrt_iron", "iron", location = TRUE)
loc_NO2NO3 = get_events("log_NO2NO3", "Nitrogen", location = TRUE)
loc_PO4 = get_events("log_PO4", "PO4", location = TRUE)
loc_oxygen = get_events("Mean_Oxygen", "Oxygen", location = TRUE)
loc_inorganic_ion = get_events("inorganic_ion", "inorganic_ion", location = TRUE)
loc_dfs = rbind(loc_iron, loc_NO2NO3, loc_PO4, loc_oxygen, loc_inorganic_ion, get_events("Fe2+_text_search", "Fe2_textSearch", location = TRUE), get_events("Fe3+_text_search", "Fe3_textSearch", location = TRUE))
loc_dfs = loc_dfs[loc_dfs[, paste0(plot_node, ".origin")] %in% mixed_states, ]
gen_loc_name = function(k) return(sprintf("T24/%s_%s_%s.png", plot_node, k, type))
if (remove_leaf_events) {
gen_loc_name = function(k) return(sprintf("%s-plots/internal-location-%snode/internal_%s_%s_%s.png", clock_model, plot_node, plot_node, k, type))
}
make_graph(loc_iron, out_graph = gen_loc_name("iron"), title_text = "COGs high corr to iron", location = TRUE)
make_graph(loc_NO2NO3, gen_loc_name("nitrogen"), "COGs high corr to NO2NO3", location = TRUE)
make_graph(loc_PO4, gen_loc_name("phosphate"), "COGs high corr to phosphate", location = TRUE)
make_graph(loc_oxygen, gen_loc_name("oxygen"), "COGs high corr to oxygen", location = TRUE)
make_graph(loc_inorganic_ion, gen_loc_name("inorganic_ion"), "inorganic ion COGs", location = TRUE)
g2 = ggplot(loc_dfs, aes_string(x = paste0(plot_node, ".date"), color = paste0(plot_node, ".origin"), y = "substrate", group = "substrate")) + scale_color_manual(values = mixed_color_scale)
jitter_plot_shared(g2, ytop = length(unique(loc_dfs$substrate)))
# if (remove_leaf_events) {
#   ggsave(sprintf("%s-plots/all-substrate/internal-location-%snode.png", clock_model, plot_node), width = 10, height = 5)
# } else {
#   ggsave(sprintf("%s-plots/all-substrate/location-%snode.png", clock_model, plot_node), width = 10, height = 5)
# }
# }
if (remove_leaf_events) {
ggsave(sprintf("T24/internal-location-%snode.png", plot_node), width = 10, height = 5)
} else {
ggsave(sprintf("T24/location-%snode.png", plot_node), width = 10, height = 5)
}
clock_model = "cir1"
remove_leaf_events = TRUE
plot_node = "left"
# type="density"
type="histogram"
categories_COGs = read.csv("high-cor-COGs.txt", row.names=1, comment.char="#")
COG_record = read.csv(sprintf("../COG_reconciliation_summary_%s.csv", clock_model))
done_COGs = pull(COG_record, COG)
good_COGs = filter(COG_record, exit_status == "everything_successful") %>% pull(COG)
loc_iron = get_events("sqrt_iron", "iron", location = TRUE)
loc_NO2NO3 = get_events("log_NO2NO3", "Nitrogen", location = TRUE)
loc_PO4 = get_events("log_PO4", "PO4", location = TRUE)
loc_oxygen = get_events("Mean_Oxygen", "Oxygen", location = TRUE)
loc_inorganic_ion = get_events("inorganic_ion", "inorganic_ion", location = TRUE)
loc_dfs = rbind(loc_iron, loc_NO2NO3, loc_PO4, loc_oxygen, loc_inorganic_ion, get_events("Fe2+_text_search", "Fe2_textSearch", location = TRUE), get_events("Fe3+_text_search", "Fe3_textSearch", location = TRUE))
loc_dfs = loc_dfs[loc_dfs[, paste0(plot_node, ".origin")] %in% mixed_states, ]
gen_loc_name = function(k) return(sprintf("T24/%s_%s_%s.png", plot_node, k, type))
if (remove_leaf_events) {
gen_loc_name = function(k) return(sprintf("%s-plots/internal-location-%snode/internal_%s_%s_%s.png", clock_model, plot_node, plot_node, k, type))
}
make_graph(loc_iron, out_graph = gen_loc_name("iron"), title_text = "COGs high corr to iron", location = TRUE)
make_graph(loc_NO2NO3, gen_loc_name("nitrogen"), "COGs high corr to NO2NO3", location = TRUE)
make_graph(loc_PO4, gen_loc_name("phosphate"), "COGs high corr to phosphate", location = TRUE)
make_graph(loc_oxygen, gen_loc_name("oxygen"), "COGs high corr to oxygen", location = TRUE)
make_graph(loc_inorganic_ion, gen_loc_name("inorganic_ion"), "inorganic ion COGs", location = TRUE)
g2 = ggplot(loc_dfs, aes_string(x = paste0(plot_node, ".date"), color = paste0(plot_node, ".origin"), y = "substrate", group = "substrate")) + scale_color_manual(values = mixed_color_scale)
jitter_plot_shared(g2, ytop = length(unique(loc_dfs$substrate)))
# if (remove_leaf_events) {
#   ggsave(sprintf("%s-plots/all-substrate/internal-location-%snode.png", clock_model, plot_node), width = 10, height = 5)
# } else {
#   ggsave(sprintf("%s-plots/all-substrate/location-%snode.png", clock_model, plot_node), width = 10, height = 5)
# }
# }
if (remove_leaf_events) {
ggsave(sprintf("T24/internal-location-%snode.png", plot_node), width = 10, height = 5)
} else {
ggsave(sprintf("T24/location-%snode.png", plot_node), width = 10, height = 5)
}
gen_loc_name
clock_model = "cir1"
remove_leaf_events = TRUE
plot_node = "left"
# type="density"
type="histogram"
categories_COGs = read.csv("high-cor-COGs.txt", row.names=1, comment.char="#")
COG_record = read.csv(sprintf("../COG_reconciliation_summary_%s.csv", clock_model))
done_COGs = pull(COG_record, COG)
good_COGs = filter(COG_record, exit_status == "everything_successful") %>% pull(COG)
merge_events = function(COGs, location = FALSE) {
file_list = paste0(sprintf("../%s_ecceTERA_analysis/", clock_model), COGs, "_symmetric.events_event_dates.txt")
if (location) {
file_list = paste0(sprintf("../events_locations/T29_%s_location_merged_events/", clock_model), COGs, "-events-location.tsv")
}
data_list = lapply(file_list, read_events, location = location)
merge_data = bind_rows(data_list)
return(merge_data)
}
clock_model = "cir1"
remove_leaf_events = FALSE
plot_node = "left"
# type="density"
type="histogram"
categories_COGs = read.csv("high-cor-COGs.txt", row.names=1, comment.char="#")
COG_record = read.csv(sprintf("../COG_reconciliation_summary_%s.csv", clock_model))
done_COGs = pull(COG_record, COG)
good_COGs = filter(COG_record, exit_status == "everything_successful") %>% pull(COG)
loc_iron = get_events("sqrt_iron", "iron", location = TRUE)
loc_NO2NO3 = get_events("log_NO2NO3", "Nitrogen", location = TRUE)
loc_PO4 = get_events("log_PO4", "PO4", location = TRUE)
loc_oxygen = get_events("Mean_Oxygen", "Oxygen", location = TRUE)
loc_inorganic_ion = get_events("inorganic_ion", "inorganic_ion", location = TRUE)
loc_dfs = rbind(loc_iron, loc_NO2NO3, loc_PO4, loc_oxygen, loc_inorganic_ion, get_events("Fe2+_text_search", "Fe2_textSearch", location = TRUE), get_events("Fe3+_text_search", "Fe3_textSearch", location = TRUE))
loc_dfs = loc_dfs[loc_dfs[, paste0(plot_node, ".origin")] %in% mixed_states, ]
gen_loc_name = function(k) return(sprintf("T29/%s_%s_%s.png", plot_node, k, type))
make_graph(loc_iron, out_graph = gen_loc_name("iron"), title_text = "COGs high corr to iron", location = TRUE)
make_graph(loc_NO2NO3, gen_loc_name("nitrogen"), "COGs high corr to NO2NO3", location = TRUE)
make_graph(loc_PO4, gen_loc_name("phosphate"), "COGs high corr to phosphate", location = TRUE)
make_graph(loc_oxygen, gen_loc_name("oxygen"), "COGs high corr to oxygen", location = TRUE)
make_graph(loc_inorganic_ion, gen_loc_name("inorganic_ion"), "inorganic ion COGs", location = TRUE)
g2 = ggplot(loc_dfs, aes_string(x = paste0(plot_node, ".date"), color = paste0(plot_node, ".origin"), y = "substrate", group = "substrate")) + scale_color_manual(values = mixed_color_scale)
jitter_plot_shared(g2, ytop = length(unique(loc_dfs$substrate)))
# if (remove_leaf_events) {
#   ggsave(sprintf("%s-plots/all-substrate/internal-location-%snode.png", clock_model, plot_node), width = 10, height = 5)
# } else {
#   ggsave(sprintf("%s-plots/all-substrate/location-%snode.png", clock_model, plot_node), width = 10, height = 5)
# }
# }
if (remove_leaf_events) {
ggsave(sprintf("T29/internal-location-%snode.png", plot_node), width = 10, height = 5)
} else {
ggsave(sprintf("T29/location-%snode.png", plot_node), width = 10, height = 5)
}
merge_events = function(COGs, location = FALSE) {
file_list = paste0(sprintf("../%s_ecceTERA_analysis/", clock_model), COGs, "_symmetric.events_event_dates.txt")
if (location) {
file_list = paste0(sprintf("../events_locations/T29_%s_location_merged_events/", clock_model), COGs, "-events-location.tsv")
}
data_list = lapply(file_list, read_events, location = location)
merge_data = bind_rows(data_list)
return(merge_data)
}
merge_events = function(COGs, location = FALSE) {
file_list = paste0(sprintf("../%s_ecceTERA_analysis/", clock_model), COGs, "_symmetric.events_event_dates.txt")
if (location) {
file_list = paste0(sprintf("../events_locations/T24_%s_location_merged_events/", clock_model), COGs, "-events-location.tsv")
}
data_list = lapply(file_list, read_events, location = location)
merge_data = bind_rows(data_list)
return(merge_data)
}
clock_model = "cir1"
remove_leaf_events = FALSE
plot_node = "left"
# type="density"
type="histogram"
categories_COGs = read.csv("high-cor-COGs.txt", row.names=1, comment.char="#")
COG_record = read.csv(sprintf("../COG_reconciliation_summary_%s.csv", clock_model))
done_COGs = pull(COG_record, COG)
good_COGs = filter(COG_record, exit_status == "everything_successful") %>% pull(COG)
loc_iron = get_events("sqrt_iron", "iron", location = TRUE)
loc_NO2NO3 = get_events("log_NO2NO3", "Nitrogen", location = TRUE)
loc_PO4 = get_events("log_PO4", "PO4", location = TRUE)
loc_oxygen = get_events("Mean_Oxygen", "Oxygen", location = TRUE)
loc_inorganic_ion = get_events("inorganic_ion", "inorganic_ion", location = TRUE)
loc_dfs = rbind(loc_iron, loc_NO2NO3, loc_PO4, loc_oxygen, loc_inorganic_ion, get_events("Fe2+_text_search", "Fe2_textSearch", location = TRUE), get_events("Fe3+_text_search", "Fe3_textSearch", location = TRUE))
loc_dfs = loc_dfs[loc_dfs[, paste0(plot_node, ".origin")] %in% mixed_states, ]
gen_loc_name = function(k) return(sprintf("T24/%s_%s_%s.png", plot_node, k, type))
make_graph(loc_iron, out_graph = gen_loc_name("iron"), title_text = "COGs high corr to iron", location = TRUE)
make_graph(loc_NO2NO3, gen_loc_name("nitrogen"), "COGs high corr to NO2NO3", location = TRUE)
make_graph(loc_PO4, gen_loc_name("phosphate"), "COGs high corr to phosphate", location = TRUE)
make_graph(loc_oxygen, gen_loc_name("oxygen"), "COGs high corr to oxygen", location = TRUE)
gen_loc_name = function(k) return(sprintf("T24-allEvents-cir1/%s_%s_%s.png", plot_node, k, type))
make_graph(loc_iron, out_graph = gen_loc_name("iron"), title_text = "COGs high corr to iron", location = TRUE)
make_graph(loc_NO2NO3, gen_loc_name("nitrogen"), "COGs high corr to NO2NO3", location = TRUE)
make_graph(loc_PO4, gen_loc_name("phosphate"), "COGs high corr to phosphate", location = TRUE)
make_graph(loc_oxygen, gen_loc_name("oxygen"), "COGs high corr to oxygen", location = TRUE)
make_graph(loc_inorganic_ion, gen_loc_name("inorganic_ion"), "inorganic ion COGs", location = TRUE)
g2 = ggplot(loc_dfs, aes_string(x = paste0(plot_node, ".date"), color = paste0(plot_node, ".origin"), y = "substrate", group = "substrate")) + scale_color_manual(values = mixed_color_scale)
jitter_plot_shared(g2, ytop = length(unique(loc_dfs$substrate)))
s) {
ggsave(sprintf("T24-allEvents-cir1/internal-location-%snode.png", plot_node), width = 10, height = 5)
} else {
ggsave(sprintf("T24
c
c
c
}
}
}
}
}
}
adkf
aadifj[30-12\]
# if (remove_leaf_events) {
#   ggsave(sprintf("%s-plots/all-substrate/internal-location-%snode.png", clock_model, plot_node), width = 10, height = 5)
# } else {
#   ggsave(sprintf("%s-plots/all-substrate/location-%snode.png", clock_model, plot_node), width = 10, height = 5)
# }
# }
if (remove_leaf_events) {
ggsave(sprintf("T24-allEvents-cir1/internal-location-%snode.png", plot_node), width = 10, height = 5)
} else {
ggsave(sprintf("T24-allEvents-cir1/location-%snode.png", plot_node), width = 10, height = 5)
}
src_ecceTERA
all_event_files
knitr::opts_chunk$set(echo = TRUE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path ))
clock_model = "cir1"
source("./events_location_utils.R")
init_env()
# BT_nodes_origin = read.csv("BT_node_origin.csv")
BT_nodes_origin = read.csv("T29_BT_node_origin.csv")
bayesTraits_node_coding = get_BT_coding()
leaves_origin = read.delim("leaves_origin.txt", col.names = c("species", "origin")) %>%
filter(origin %in% state_vec_short)
ecceTERA_node_coding = read.csv("leaves_of_ecceTERA_interal_nodes.csv")
BT_nodes_origin_leaves = merge(BT_nodes_origin, bayesTraits_node_coding, by = "BT_node")
rest = c("left.date", "right.date", "midpoint.date")
merged_cols = colnames(BT_nodes_origin_leaves)[1:(ncol(BT_nodes_origin_leaves)-1)]
l_prob = paste0("left.", merged_cols)
r_prob = paste0("right.", merged_cols)
merge_internal_nodes = function(df) {
df = merge(df, ecceTERA_node_coding, on = "ecceTERA_node")
df = merge(df, BT_nodes_origin_leaves, on = "leaves_below")
df = subset(df, select = -c(leaves_below))
return(df)
}
merge_leaves = function(df) {
df = merge(df, leaves_origin, by.x = "ecceTERA_node", by.y = "species")
df = df %>% mutate(
BT_node = ecceTERA_node,
leaves_count = 0)
return(df)
}
get_event_location = function(event_date_file) {
COG = str_match(event_date_file, "COG\\d+")[1]
outfile = sprintf("T29_%s_location_merged_events/%s-events-location.tsv", clock_model, COG)
tmp = read.delim(event_date_file, na.strings = "?") %>%
filter(right.node != "UNSAMPLED")
print(sprintf("I should end up with -- %d -- events for %s", nrow(tmp), COG))
# merging left.node
colnames(tmp) = c(c("event", "ecceTERA_node", "right.node"), rest)
tmp = merge_internal_nodes(tmp)
# merging right.node
colnames(tmp) = c(c("left.node", "event", "ecceTERA_node"), rest, l_prob)
tmp_right_internal = suppressWarnings(filter(tmp, !is.na(as.numeric(ecceTERA_node))))
tmp_right_leaves = suppressWarnings(filter(tmp, is.na(as.numeric(ecceTERA_node))))
tmp_right_internal = merge_internal_nodes(tmp_right_internal)
tmp_right_leaves = merge_leaves(tmp_right_leaves)[colnames(tmp_right_internal)]
event_date_location = rbind(tmp_right_internal, tmp_right_leaves)
colnames(event_date_location) = c(c("right.node", "left.node", "event"), rest, l_prob, r_prob)
event_date_location = event_date_location %>% mutate(
left.origin = str_replace_all(left.origin, state_map),
right.origin = str_replace_all(right.origin, state_map))
print(sprintf("In fact, now I have -- %d -- events", nrow(event_date_location)))
print(sprintf("Write file to: %s", outfile))
write.table(event_date_location, file=outfile, sep = "\t", row.names=FALSE)
return(outfile)
}
all_event_files = list.files(path = src_ecceTERA, pattern = "*_symmetric.events_event_dates.txt")
merged_files = lapply(paste(src_ecceTERA, all_event_files, sep = "/"), get_event_location)
out_vec = unlist(merged_files)
merge_events = function(COGs, location = FALSE) {
file_list = paste0(sprintf("../%s_ecceTERA_analysis/", clock_model), COGs, "_symmetric.events_event_dates.txt")
if (location) {
file_list = paste0(sprintf("../events_locations/T29_%s_location_merged_events/", clock_model), COGs, "-events-location.tsv")
}
data_list = lapply(file_list, read_events, location = location)
merge_data = bind_rows(data_list)
return(merge_data)
}
clock_model = "cir1"
remove_leaf_events = FALSE
plot_node = "left"
# type="density"
type="histogram"
categories_COGs = read.csv("high-cor-COGs.txt", row.names=1, comment.char="#")
COG_record = read.csv(sprintf("../COG_reconciliation_summary_%s.csv", clock_model))
done_COGs = pull(COG_record, COG)
good_COGs = filter(COG_record, exit_status == "everything_successful") %>% pull(COG)
# can only choose left or right origin
# for (plot_node in c("left", "right")) {
loc_iron = get_events("sqrt_iron", "iron", location = TRUE)
loc_NO2NO3 = get_events("log_NO2NO3", "Nitrogen", location = TRUE)
loc_PO4 = get_events("log_PO4", "PO4", location = TRUE)
loc_oxygen = get_events("Mean_Oxygen", "Oxygen", location = TRUE)
loc_inorganic_ion = get_events("inorganic_ion", "inorganic_ion", location = TRUE)
loc_dfs = rbind(loc_iron, loc_NO2NO3, loc_PO4, loc_oxygen, loc_inorganic_ion, get_events("Fe2+_text_search", "Fe2_textSearch", location = TRUE), get_events("Fe3+_text_search", "Fe3_textSearch", location = TRUE))
loc_dfs = loc_dfs[loc_dfs[, paste0(plot_node, ".origin")] %in% mixed_states, ]
# gen_loc_name = function(k) return(sprintf("%s-plots/location-%snode/%s_%s_%s.png", clock_model, plot_node, plot_node, k, type))
gen_loc_name = function(k) return(sprintf("T29-allEvents-cir1/%s_%s_%s.png", plot_node, k, type))
# if (remove_leaf_events) {
#   gen_loc_name = function(k) return(sprintf("%s-plots/internal-location-%snode/internal_%s_%s_%s.png", clock_model, plot_node, plot_node, k, type))
# }
# plotting the location where the events happened!!!!
make_graph(loc_iron, out_graph = gen_loc_name("iron"), title_text = "COGs high corr to iron", location = TRUE)
make_graph(loc_NO2NO3, gen_loc_name("nitrogen"), "COGs high corr to NO2NO3", location = TRUE)
make_graph(loc_PO4, gen_loc_name("phosphate"), "COGs high corr to phosphate", location = TRUE)
make_graph(loc_oxygen, gen_loc_name("oxygen"), "COGs high corr to oxygen", location = TRUE)
make_graph(loc_inorganic_ion, gen_loc_name("inorganic_ion"), "inorganic ion COGs", location = TRUE)
g2 = ggplot(loc_dfs, aes_string(x = paste0(plot_node, ".date"), color = paste0(plot_node, ".origin"), y = "substrate", group = "substrate")) + scale_color_manual(values = mixed_color_scale)
jitter_plot_shared(g2, ytop = length(unique(loc_dfs$substrate)))
# if (remove_leaf_events) {
#   ggsave(sprintf("%s-plots/all-substrate/internal-location-%snode.png", clock_model, plot_node), width = 10, height = 5)
# } else {
#   ggsave(sprintf("%s-plots/all-substrate/location-%snode.png", clock_model, plot_node), width = 10, height = 5)
# }
# }
if (remove_leaf_events) {
ggsave(sprintf("T29-allEvents-cir1/internal-location-%snode.png", plot_node), width = 10, height = 5)
} else {
ggsave(sprintf("T29-allEvents-cir1/location-%snode.png", plot_node), width = 10, height = 5)
}
# }
dev.off()
dev.off()
