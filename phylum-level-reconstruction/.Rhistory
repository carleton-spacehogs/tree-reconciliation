BT_node_origin <- paste0("O",trial, "_node.csv")
num_states = 6
stationary_p = 0.05
df = read.delim(MCMC_matrix)
#1:(nrow(df)-4500)
########
#change according to log file
########
df = df[1:(nrow(df)), -c(1:36)]
#change this to include root
df = df[grepl("*P(*)*", colnames(df))]
df = df[complete.cases(df), ]
print("file read complete!")
count = 0
#lags for auto-corr analysis
lags <- seq(1, nrow(df)-1, by = 1)
#print(length(lags))
stats = apply(df, 2, function(x) {
count <- count + 1
test1 = heidel.diag(mcmc(x), eps=0.1, pvalue = 0.00)
#print(x)
hpd = HPDinterval(mcmc(x), prob = 0.95)
eff_size = effectiveSize(mcmc(x))
med = median(x)
autocorr_diag = autocorr.diag(mcmc(x),lags = lags, relative=TRUE)
c(as.numeric(test1), hpd = as.numeric(hpd), eff_size = eff_size, med = med, autocorr_diag)
})
library(dplyr)
library(coda)
library(tidyr)
library(stringr)
trial <- "S12"
MCMC_matrix <-paste0(trial, "-loc_only_matrix.txt")
MCMC_summary <-paste0("O",trial, "_statistic.csv")
BT_node_origin <- paste0("O",trial, "_node.csv")
num_states = 6
stationary_p = 0.05
df = read.delim(MCMC_matrix)
df = read.delim(MCMC_matrix)
#1:(nrow(df)-4500)
########
#change according to log file
########
df = df[1:(nrow(df)), -c(1:36)]
#change this to include root
df = df[grepl("*P(*)*", colnames(df))]
#change this to include root
df = df[grepl("*P(*)*", colnames(df))]
df = df[complete.cases(df), ]
print("file read complete!")
count = 0
#lags for auto-corr analysis
lags <- seq(1, nrow(df)-1, by = 1)
stats = apply(df, 2, function(x) {
count <- count + 1
test1 = heidel.diag(mcmc(x), eps=0.1, pvalue = 0.00)
#print(x)
hpd = HPDinterval(mcmc(x), prob = 0.95)
eff_size = effectiveSize(mcmc(x))
med = median(x)
autocorr_diag = autocorr.diag(mcmc(x),lags = lags, relative=TRUE)
c(as.numeric(test1), hpd = as.numeric(hpd), eff_size = eff_size, med = med, autocorr_diag)
})
df[0]
df[1]
df[2]
x = df[2]
test1 = heidel.diag(mcmc(x), eps=0.1, pvalue = 0.00)
hpd = HPDinterval(mcmc(x), prob = 0.95)
eff_size = effectiveSize(mcmc(x))
test1
autocorr_diag = autocorr.diag(mcmc(x),lags = lags, relative=TRUE)
c(as.numeric(test1), hpd = as.numeric(hpd), eff_size = eff_size, med = med, autocorr_diag)
stats = apply(df, 2, function(x) {
count <- count + 1
test1 = heidel.diag(mcmc(x), eps=0.1, pvalue = 0.00)
#print(x)
hpd = HPDinterval(mcmc(x), prob = 0.95)
eff_size = effectiveSize(mcmc(x))
med = median(x)
autocorr_diag = autocorr.diag(mcmc(x),lags = lags, relative=TRUE)
c(as.numeric(test1), hpd = as.numeric(hpd), eff_size = eff_size, med = med, autocorr_diag)
})
stats = apply(df, 2, function(x) {
count <- count + 1
print(x)
test1 = heidel.diag(mcmc(x), eps=0.1, pvalue = 0.00)
hpd = HPDinterval(mcmc(x), prob = 0.95)
eff_size = effectiveSize(mcmc(x))
med = median(x)
autocorr_diag = autocorr.diag(mcmc(x),lags = lags, relative=TRUE)
c(as.numeric(test1), hpd = as.numeric(hpd), eff_size = eff_size, med = med, autocorr_diag)
})
stats = apply(df, 2, function(x) {
count <- count + 1
print(count)
print(x)
test1 = heidel.diag(mcmc(x), eps=0.1, pvalue = 0.00)
hpd = HPDinterval(mcmc(x), prob = 0.95)
eff_size = effectiveSize(mcmc(x))
med = median(x)
autocorr_diag = autocorr.diag(mcmc(x),lags = lags, relative=TRUE)
c(as.numeric(test1), hpd = as.numeric(hpd), eff_size = eff_size, med = med, autocorr_diag)
})
View(df)
df[18103]
df[18]
df[1845]
colnames(df[1845])
colnames(df[2845])
colnames(df[2545])
colnames(df[2345])
colnames(df[2500])
colnames(df[2520])
colnames(df[2519])
x = df[2519]
test1 = heidel.diag(mcmc(x), eps=0.1, pvalue = 0.00)
test1
stats = apply(df, 2, function(x) {
count <- count + 1
print(count)
print(colsnames(x))
test1 = heidel.diag(mcmc(x), eps=0.1, pvalue = 0.00)
hpd = HPDinterval(mcmc(x), prob = 0.95)
eff_size = effectiveSize(mcmc(x))
med = median(x)
autocorr_diag = autocorr.diag(mcmc(x),lags = lags, relative=TRUE)
c(as.numeric(test1), hpd = as.numeric(hpd), eff_size = eff_size, med = med, autocorr_diag)
})
stats = apply(df, 2, function(x) {
count <- count + 1
print(count)
print(colnames(x))
test1 = heidel.diag(mcmc(x), eps=0.1, pvalue = 0.00)
hpd = HPDinterval(mcmc(x), prob = 0.95)
eff_size = effectiveSize(mcmc(x))
med = median(x)
autocorr_diag = autocorr.diag(mcmc(x),lags = lags, relative=TRUE)
c(as.numeric(test1), hpd = as.numeric(hpd), eff_size = eff_size, med = med, autocorr_diag)
})
View(df)
stats = apply(df, 2, function(x) {
count <- count + 1
print(count)
print(colnames(x))
print(x)
test1 = heidel.diag(mcmc(x), eps=0.1, pvalue = 0.00)
hpd = HPDinterval(mcmc(x), prob = 0.95)
eff_size = effectiveSize(mcmc(x))
med = median(x)
autocorr_diag = autocorr.diag(mcmc(x),lags = lags, relative=TRUE)
c(as.numeric(test1), hpd = as.numeric(hpd), eff_size = eff_size, med = med, autocorr_diag)
})
colnames(df[1519])
colnames(df[1619])
colnames(df[1719])
colnames(df[1659])
colnames(df[1689])
colnames(df[1679])
colnames(df[1682])
colnames(df[1685])
x = df[1685]
x
test1 = heidel.diag(mcmc(x), eps=0.1, pvalue = 0.00)
stats = apply(df, 2, function(x) {
count <- count + 1
print(count)
print(colnames(x))
print(x)
test1 = heidel.diag(mcmc(x), eps=0.1, pvalue = 0.00)
hpd = HPDinterval(mcmc(x), prob = 0.95)
eff_size = effectiveSize(mcmc(x))
med = median(x)
autocorr_diag = autocorr.diag(mcmc(x),lags = lags, relative=TRUE)
c(as.numeric(test1), hpd = as.numeric(hpd), eff_size = eff_size, med = med, autocorr_diag)
})
stats = apply(df, 2, function(x) {
count <- count + 1
print(count)
print(colnames(x))
print(x)
test1 = heidel.diag(mcmc(x), eps=0.1, pvalue = 0.00)
hpd = HPDinterval(mcmc(x), prob = 0.95)
eff_size = effectiveSize(mcmc(x))
med = median(x)
autocorr_diag = autocorr.diag(mcmc(x),lags = lags, relative=TRUE)
c(as.numeric(test1), hpd = as.numeric(hpd), eff_size = eff_size, med = med, autocorr_diag)
})
colnames(df[1685])
colnames(df[1385])
colnames(df[1485])
colnames(df[1355])
colnames(df[1385])
colnames(df[1395])
colnames(df[1405])
colnames(df[1408])
colnames(df[1409])
x = df[1409]
x
test1 = heidel.diag(mcmc(x), eps=0.1, pvalue = 0.00)
# Check if x contains any NA values
anyNA(x)
test1 = heidel.diag(mcmc(x))
# Remove all zero values
x <- x[x != 0]
test1 = heidel.diag(mcmc(x))
test1
library(dplyr)
library(coda)
library(tidyr)
library(stringr)
trial <- "S12"
MCMC_matrix <-paste0(trial, "-loc_only_matrix.txt")
MCMC_summary <-paste0("O",trial, "_statistic.csv")
BT_node_origin <- paste0("O",trial, "_node.csv")
num_states = 6
stationary_p = 0.05
df = read.delim(MCMC_matrix)
#1:(nrow(df)-4500)
########
#change according to log file
########
df = df[1:(nrow(df)), -c(1:36)]
#change this to include root
df = df[grepl("*P(*)*", colnames(df))]
df = df[complete.cases(df), ]
print("file read complete!")
count = 0
#lags for auto-corr analysis
lags <- seq(1, nrow(df)-1, by = 1)
#print(length(lags))
stats = apply(df, 2, function(x) {
count <- count + 1
print(count)
print(colnames(x))
print(x)
x <- x[x != 0]
test1 = heidel.diag(mcmc(x), eps=0.1, pvalue = 0.00)
hpd = HPDinterval(mcmc(x), prob = 0.95)
eff_size = effectiveSize(mcmc(x))
med = median(x)
autocorr_diag = autocorr.diag(mcmc(x),lags = lags, relative=TRUE)
c(as.numeric(test1), hpd = as.numeric(hpd), eff_size = eff_size, med = med, autocorr_diag)
})
library(dplyr)
library(coda)
library(tidyr)
library(stringr)
trial <- "S12"
MCMC_matrix <-paste0(trial, "-loc_only_matrix.txt")
MCMC_summary <-paste0("O",trial, "_statistic.csv")
BT_node_origin <- paste0("O",trial, "_node.csv")
num_states = 6
stationary_p = 0.05
df = read.delim(MCMC_matrix)
#1:(nrow(df)-4500)
########
#change according to log file
########
df = df[1:(nrow(df)), -c(1:36)]
#change this to include root
df = df[grepl("*P(*)*", colnames(df))]
df = df[complete.cases(df), ]
print("file read complete!")
count = 0
#lags for auto-corr analysis
lags <- seq(1, nrow(df)-1, by = 1)
#print(length(lags))
stats = apply(df, 2, function(x) {
count <- count + 1
print(count)
print(colnames(x))
print(x)
x <- x[x != 0e+00]
test1 = heidel.diag(mcmc(x), eps=0.1, pvalue = 0.00)
hpd = HPDinterval(mcmc(x), prob = 0.95)
eff_size = effectiveSize(mcmc(x))
med = median(x)
autocorr_diag = autocorr.diag(mcmc(x),lags = lags, relative=TRUE)
c(as.numeric(test1), hpd = as.numeric(hpd), eff_size = eff_size, med = med, autocorr_diag)
})
colnames(df[56])
colnames(df[156])
colnames(df[556])
colnames(df[456])
colnames(df[500])
colnames(df[502])
colnames(df[503])
x = df[503]
test1 = heidel.diag(mcmc(x), eps=0.1, pvalue = 0.00)
x <- x[x != 0e+00]
test1 = heidel.diag(mcmc(x), eps=0.1, pvalue = 0.00)
count(x[x != 0e+00])
# Count the number of zeros
num_zeros <- sum(x == 0)
print(num_zeros)
length(x)
test1 = heidel.diag(mcmc(x), eps=0.1, pvalue = 0.00)
x <- x[x != 0e+00]
length(x)
x <- x[x != 0]
length(x)
library(dplyr)
library(coda)
library(tidyr)
library(stringr)
trial <- "S15"
MCMC_matrix <-paste0(trial, "-loc_only_matrix.txt")
MCMC_summary <-paste0("O",trial, "_statistic.csv")
BT_node_origin <- paste0("O",trial, "_node.csv")
num_states = 6
stationary_p = 0.05
df = read.delim(MCMC_matrix)
#1:(nrow(df)-4500)
########
#change according to log file
########
df = df[1:(nrow(df)), -c(1:36)]
#change this to include root
df = df[grepl("*P(*)*", colnames(df))]
df = df[complete.cases(df), ]
print("file read complete!")
count = 0
#lags for auto-corr analysis
lags <- seq(1, nrow(df)-1, by = 1)
#print(length(lags))
stats = apply(df, 2, function(x) {
count <- count + 1
print(count)
print(colnames(x))
print(x)
test1 = heidel.diag(mcmc(x), eps=0.1, pvalue = 0.00)
hpd = HPDinterval(mcmc(x), prob = 0.95)
eff_size = effectiveSize(mcmc(x))
med = median(x)
autocorr_diag = autocorr.diag(mcmc(x),lags = lags, relative=TRUE)
c(as.numeric(test1), hpd = as.numeric(hpd), eff_size = eff_size, med = med, autocorr_diag)
})
#print(paste0("lag_", lags))
df.stats = as.data.frame(t(stats))
colnames(df.stats) = c("stationarity_test", "start_iteration", "stationarity_pval", "Halfwidth_test", "mean", "halfwidth", "HPD_lower", "HPD_upper", "effective_size", "median", paste0("autocorr_lag_", lags))
df.stats = df.stats %>% mutate(adj_stationarity_pval = p.adjust(stationarity_pval, method = "BH"))
#add in paste0("autocorr_lag_", lags) to see autocorr
out = df.stats %>%
mutate(Halfwidth_test = ifelse(Halfwidth_test == 1, "passed", "failed"))%>%
mutate(staionarity_test_adjusted = ifelse(adj_stationarity_pval > stationary_p, "passed", "failed"))%>%
mutate(stationarity_test = ifelse(stationarity_test == 1, "passed", "failed"))%>%
select(c("mean", "median", "HPD_lower", "HPD_upper", "effective_size","start_iteration", "stationarity_test", "stationarity_pval", "staionarity_test_adjusted", "adj_stationarity_pval","Halfwidth_test", "halfwidth"))
write.csv(out, MCMC_summary, row.names=TRUE)
print("statistic complete!")
#autocorr plots
dir.create(paste0(trial,"_parameter_autocorrelations"))
for(i in 1:ncol(df)){
png(filename=paste0(paste0(trial,"_parameter_autocorrelations/"), colnames(df)[i], "png"))
autocorr.plot(mcmc(df[,i]), lag.max = nrow(df), main = paste("Autocorrelation for", colnames(df)[i]))
dev.off()
}
dir.create(paste0(trial, "parameter_trace_density"))
for(i in 1:ncol(df)){
png(filename=paste0(paste0(trial, "parameter_trace_density/"), colnames(df)[i], "png"))
plot(mcmc(df[,i]), trace = TRUE, density = TRUE, smooth = FALSE)
dev.off()
}
library(dplyr)
library(coda)
library(tidyr)
library(stringr)
trial <- "Trial22"
MCMC_matrix <-paste0(trial, "-loc_only_matrix.txt")
MCMC_summary <-paste0("O",trial, "_statistic.csv")
BT_node_origin <- paste0("O",trial, "_node.csv")
num_states = 6
stationary_p = 0.05
df = read.delim(MCMC_matrix)
#1:(nrow(df)-4500)
########
#change according to log file
########
df = df[1:(nrow(df)), -c(1:36)]
#change this to include root
df = df[grepl("*P(*)*", colnames(df))]
df = df[complete.cases(df), ]
print("file read complete!")
count = 0
#lags for auto-corr analysis
lags <- seq(1, nrow(df)-1, by = 1)
#print(length(lags))
stats = apply(df, 2, function(x) {
count <- count + 1
print(count)
print(colnames(x))
print(x)
test1 = heidel.diag(mcmc(x), eps=0.1, pvalue = 0.00)
hpd = HPDinterval(mcmc(x), prob = 0.95)
eff_size = effectiveSize(mcmc(x))
med = median(x)
autocorr_diag = autocorr.diag(mcmc(x),lags = lags, relative=TRUE)
c(as.numeric(test1), hpd = as.numeric(hpd), eff_size = eff_size, med = med, autocorr_diag)
})
df = read.delim(MCMC_matrix)
#1:(nrow(df)-4500)
########
#change according to log file
########
#df = df[1:(nrow(df)), -c(1:36)]
df = df[1:(nrow(df)), -c(1:12)]
#change this to include root
df = df[grepl("*P(*)*", colnames(df))]
df = df[complete.cases(df), ]
print("file read complete!")
count = 0
#lags for auto-corr analysis
lags <- seq(1, nrow(df)-1, by = 1)
stats = apply(df, 2, function(x) {
count <- count + 1
print(count)
print(colnames(x))
print(x)
test1 = heidel.diag(mcmc(x), eps=0.1, pvalue = 0.00)
hpd = HPDinterval(mcmc(x), prob = 0.95)
eff_size = effectiveSize(mcmc(x))
med = median(x)
autocorr_diag = autocorr.diag(mcmc(x),lags = lags, relative=TRUE)
c(as.numeric(test1), hpd = as.numeric(hpd), eff_size = eff_size, med = med, autocorr_diag)
})
library(dplyr)
library(coda)
library(tidyr)
library(stringr)
trial <- "S1cp"
MCMC_matrix <-paste0(trial, "-loc_only_matrix.txt")
MCMC_summary <-paste0("O",trial, "_statistic.csv")
BT_node_origin <- paste0("O",trial, "_node.csv")
num_states = 5
stationary_p = 0.05
df = read.delim(MCMC_matrix)
getwd()
setwd("/Users/zhanghanni/Desktop/ASR_JoannesTree_Jun2023/scrips")
library(dplyr)
library(coda)
library(tidyr)
library(stringr)
trial <- "S1cp"
MCMC_matrix <-paste0(trial, "-loc_only_matrix.txt")
MCMC_summary <-paste0("O",trial, "_statistic.csv")
BT_node_origin <- paste0("O",trial, "_node.csv")
num_states = 5
stationary_p = 0.05
df = read.delim(MCMC_matrix)
#1:(nrow(df)-4500)
df = df[ 1:(nrow(df)-2-00), -c(1:10)]
#change this to include root
df = df[grepl("*P(*)*", colnames(df))]
df = df[complete.cases(df), ]
print("file read complete!")
count = 0
#lags for auto-corr analysis
lags <- seq(1, nrow(df)-1, by = 1)
#print(length(lags))
stats = apply(df, 2, function(x) {
count <- count + 1
test1 = heidel.diag(mcmc(x), eps=0.1, pvalue = 0.05)
#print(test1)
hpd = HPDinterval(mcmc(x), prob = 0.95)
eff_size = effectiveSize(mcmc(x))
med = median(x)
autocorr_diag = autocorr.diag(mcmc(x),lags = lags, relative=TRUE)
c(as.numeric(test1), hpd = as.numeric(hpd), eff_size = eff_size, med = med, autocorr_diag)
})
#print(paste0("lag_", lags))
df.stats = as.data.frame(t(stats))
colnames(df.stats) = c("stationarity_test", "start_iteration", "stationarity_pval", "Halfwidth_test", "mean", "halfwidth", "HPD_lower", "HPD_upper", "effective_size", "median", paste0("autocorr_lag_", lags))
df.stats = df.stats %>% mutate(adj_stationarity_pval = p.adjust(stationarity_pval, method = "BH"))
#add in paste0("autocorr_lag_", lags) to see autocorr
out = df.stats %>%
mutate(Halfwidth_test = ifelse(Halfwidth_test == 1, "passed", "failed"))%>%
mutate(staionarity_test_adjusted = ifelse(adj_stationarity_pval > stationary_p, "passed", "failed"))%>%
mutate(stationarity_test = ifelse(stationarity_test == 1, "passed", "failed"))%>%
select(c("mean", "median", "HPD_lower", "HPD_upper", "effective_size","start_iteration", "stationarity_test", "stationarity_pval", "staionarity_test_adjusted", "adj_stationarity_pval","Halfwidth_test", "halfwidth"))
write.csv(out, MCMC_summary, row.names=TRUE)
print("statistic complete!")
#autocorr plots
dir.create(paste0(trial,"_parameter_autocorrelations"))
for(i in 1:ncol(df)){
png(filename=paste0(paste0(trial,"_parameter_autocorrelations/"), colnames(df)[i], ".png"))
autocorr.plot(mcmc(df[,i]), lag.max = nrow(df), main = paste("Autocorrelation for", colnames(df)[i]))
dev.off()
}
View(df)
df = read.delim(MCMC_matrix)
#1:(nrow(df)-4500)
df = df[ 1:(nrow(df)-2-00), -c(1:10)]
#change this to include root
df = df[grepl("*P(*)*", colnames(df))]
setwd("/Users/zhanghanni/Desktop/Sequences-on-tree")
knitr::opts_chunk$set(echo = TRUE)
library(ape)
# Set the input directory containing the .treefile files
input_dir <- "/Users/zhanghanni/Desktop/Sequences-on-tree/"
# List all .treefile files in the directory
tree_files <- list.files(input_dir, pattern = "\\.treefile$", full.names = TRUE)
# Loop over each file
for(file in tree_files) {
# Read the tree file
tree <- read.tree(file)
# Remove bootstrap values
tree$node.label <- NULL
# Create output file name
output_file <- gsub("treefile", "nexus", file)
# Write the modified tree to a new file in Nexus format
write.nexus(tree, file = output_file)
}
